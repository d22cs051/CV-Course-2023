# -*- coding: utf-8 -*-
"""D22CS051_Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ABEC474yrNez1F1EDkD1TFp8__BtSlzy

# Find the area and perimeter of the circle

## upload images
"""

from google.colab import files
file = files.upload()

"""## importing packeges"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
import matplotlib.pyplot as plt

"""## preprocessing of image PNG -> GRAY"""

# loading with alpha channels
png_img = cv2.imread("circle.png",cv2.IMREAD_UNCHANGED)
# img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
print(f"png image shape: {png_img.shape}")
# making transparent pixel to white
  # # find all the index of alpha chanels where it's ZERO '0'
tp_mask = png_img[:,:,3] == 0
  # # making all the ZERO alpha chanels to white(255)
png_img[tp_mask] = [255,255,255,255]
# converting to gray scale
img_gray = cv2.cvtColor(png_img,cv2.COLOR_RGBA2GRAY)
print(f"gray image shape: {img_gray.shape}")

# showing images
print("Image in png")
cv2_imshow(png_img)
print()
print("Image in gray")
cv2_imshow(img_gray)

# plotting with matplotlib
plt.figure(figsize=(12,10))
plt.imshow(img_gray,cmap='gray')
plt.show()

"""## finding the radius of the images"""

# plt.figure(figsize=(12,10))
# print(img_gray.shape)
# defining the min and max dist. of x & y's
max_x,max_y = 0,0
# finding the distance b/w pixles distance along horizontal axis
for i in img_gray:
  black_px = np.where(i == 0)
  if len(black_px[0])>4:
  # print(black_px)
    max_x = max(black_px[0][-1]-black_px[0][0],max_x)
# finding the distance b/w pixles distance along verical axis
for i in img_gray.T:
  black_px = np.where(i == 0)
  if len(black_px[0])>4:
  # print(black_px)
    max_y = max(black_px[0][-1]-black_px[0][0],max_y)

# NOTE:- Black Line is consists of 2 pixels so, we are taking outer pixel value
radius = (max_x+max_y)/4
print(f"The radius of the circle: {radius}")

"""## printing the results"""

print(f"The area of the circle is: {(np.pi*radius**2):.2f}")
print(f"The perimeter of the circle is: {(np.pi*radius*2):.2f}")