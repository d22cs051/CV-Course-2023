# -*- coding: utf-8 -*-
"""D22CS051_Q5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CviKxf6lqrx2wclSRczqPDcavI8MQD2N
"""

import cv2 as cv
import numpy as np
from matplotlib import pyplot as plt

cv.__version__

# images of landmark name that begins with my name
landmark_name = "bahour lake"
# urls of the images of the images of above landmark
url1 = "https://upload.wikimedia.org/wikipedia/commons/thumb/e/ed/Lesser_whistling_duck_%28Dendrocygna_javanica%29_from_Bahour_lake%2C_Pondy_IMG_4162_.jpg/640px-thumb.jpg"
url2 = "https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Lesser_whistling_duck_%28Dendrocygna_javanica%29_from_Bahour_lake%2C_Pondy_IMG_4145_.jpg/640px-thumb.jpg"
url3 = "https://upload.wikimedia.org/wikipedia/commons/thumb/1/14/Bahour_lake%2C_Pondy_IMG_4165.JPG/640px-thumb.jpg"

image_url_list = [url1,url2,url3]
print(*image_url_list,sep="\n")

# downloading images from the url list
i = 1
for url in image_url_list:
  !wget {url} -O {i}"_image.jpg"
  i+=1

# reading images with cv2
img_1 = cv.imread("1_image.jpg")
img_2 = cv.imread("2_image.jpg")
img_3 = cv.imread("3_image.jpg")
print("Imgae shape in the [H,W,C] formate")
print(img_1.shape,img_2.shape,img_3.shape)

# vis. original images
plt.figure(figsize=(15,10))
plt.subplot(1,3,1)
plt.imshow(img_1[:,:,::-1])
plt.subplot(1,3,2)
plt.imshow(img_2[:,:,::-1])
plt.subplot(1,3,3)
plt.imshow(img_3[:,:,::-1])
plt.show()

# Resizing images with cv2
img_resized_1 = cv.resize(img_1, (256, 256),interpolation = cv.INTER_CUBIC)
img_resized_2 = cv.resize(img_2, (256, 256),interpolation = cv.INTER_CUBIC)
img_resized_3 = cv.resize(img_3, (256, 256),interpolation = cv.INTER_CUBIC)
# NOTE:- Using INTER_CUBIC interpolation as specified in the cv2 docs.
# link for the doc :- https://docs.opencv.org/4.x/da/d6e/tutorial_py_geometric_transformations.html

print("Resized Imgae shape in the [H,W,C] formate")
print(img_resized_1.shape,img_resized_2.shape,img_resized_3.shape)

# vis. resize images
plt.figure(figsize=(15,10))
plt.subplot(1,3,1)
plt.imshow(img_resized_1[:,:,::-1])
plt.subplot(1,3,2)
plt.imshow(img_resized_2[:,:,::-1])
plt.subplot(1,3,3)
plt.imshow(img_resized_3[:,:,::-1])
plt.show()

# converting resized images to gray scale
img_resized_gray_1 = cv.cvtColor(img_resized_1,cv.COLOR_BGR2GRAY)
img_resized_gray_2 = cv.cvtColor(img_resized_2,cv.COLOR_BGR2GRAY)
img_resized_gray_3= cv.cvtColor(img_resized_3,cv.COLOR_BGR2GRAY)

print("Resized Imgae shape in the [H,W,C] formate")
print(img_resized_gray_1.shape,img_resized_gray_2.shape,img_resized_gray_3.shape)

# vis. resize graysacle images
plt.figure(figsize=(15,10))
plt.subplot(1,3,1)
plt.imshow(img_resized_gray_1,cmap="gray")
plt.subplot(1,3,2)
plt.imshow(img_resized_gray_2,cmap="gray")
plt.subplot(1,3,3)
plt.imshow(img_resized_gray_3,cmap="gray")
plt.show()

# Subtract Image 1 with Image 2
subtracted_image = img_resized_gray_1 - img_resized_gray_2
plt.imshow(subtracted_image,cmap="gray")
plt.show()

# creating salt and peper noise
def add_salt_peper_noise(img:np.array, prob:float=0):
    '''
    desc:
      adds "Salt & Pepper" noise to an image.
    args:
      img (np.array): should be one-channel image with pixels in [0, 1] range
      prob (float): probability (threshold) that controls level of noise
    '''

    rnd = np.random.rand(img.shape[0], img.shape[1])
    noisy_img = img.copy()
    noisy_img[rnd < prob] = 0
    noisy_img[rnd > 1 - prob] = 255
    return noisy_img

# adding noise to an image
plt.figure(figsize=(15,12))
plt.subplot(1,2,1)
plt.imshow(img_resized_1[:,:,::-1])
i_noisy = add_salt_peper_noise(img_resized_1,0.05)
plt.subplot(1,2,2)
plt.imshow(i_noisy[:,:,::-1])
plt.show()

# removing noise from the above image
plt.figure(figsize=(15,12))
plt.subplot(1,2,1)
plt.imshow(i_noisy[:,:,::-1])
# removing noise with medianBlur
i_filtered = cv.medianBlur(i_noisy,3,cv.BORDER_DEFAULT)
plt.subplot(1,2,2)
plt.imshow(i_filtered[:,:,::-1])
plt.show()

# applying custom kernel
kernel = np.array([[-1,-1,-1],[0,0,0],[1,1,1]])

plt.figure(figsize=(15,12))
plt.subplot(1,2,1)
plt.imshow(img_resized_1[:,:,::-1])

# applying filter
out_img = cv.filter2D(src = img_resized_1,ddepth =-1,kernel=kernel)

plt.subplot(1,2,2)
plt.imshow(out_img[:,:,::-1])
plt.show()