# -*- coding: utf-8 -*-
"""D22CS051_Q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wx8Fw1K1mz16ND6DIRb93m4-J27deqSs
"""

# importing libs
import cv2 as cv
from matplotlib import pyplot as plt
import numpy as np

img_1 = cv.imread("clock_1.png",0)
img_2 = cv.imread("clock_2.jpg",0)
img_1.shape,img_2.shape

plt.figure(figsize=(10,10))
_,img = cv.threshold(img_1,130,255,cv.THRESH_BINARY)
plt.imshow(img,"gray")
plt.show()

# Edge detection
dst = cv.Canny(img_1 , 50, 200, None, 3)

cdst = cv.cvtColor(dst, cv.COLOR_GRAY2BGR)
line_mask = np.zeros(dst.shape)

#  Standard Hough Line Transform
linesP = cv.HoughLinesP(dst, 1, np.pi / 180, 50, None, 30, 6)
print(len(linesP))
# print(linesP.squeeze())
distance_list = []
if linesP is not None:
    for i in range(len(linesP)):
      l = linesP[i][0]
      cv.line(line_mask, (l[0], l[1]), (l[2], l[3]), 1, 3, cv.LINE_AA)
# plt.imshow(cdst[:,:,::-1])

plt.imshow(line_mask,cmap="gray")
plt.show()
print()
sorted(distance_list)

MIN_Line = linesP[1].squeeze()
HRS_Line = linesP[4].squeeze()
SEC_Line = linesP[0].squeeze()
HRS_Line,MIN_Line

if (HRS_Line[0] - HRS_Line[2]) != 0:
  m1 = (HRS_Line[1] - HRS_Line[3])/(HRS_Line[0] - HRS_Line[2])
else:
  m1 = 0
if (MIN_Line[0] - MIN_Line[2]) != 0:
  m2 = (MIN_Line[3] - MIN_Line[1])/(MIN_Line[2] - MIN_Line[0])
else:
  m2 = 0

m1,m2

angle = 180 - np.rad2deg(np.arctan(np.abs((m2-m1)/(1+m1*m2))))
print(f"the angle is :{angle:.2f}"

plt.figure(figsize=(10,10))
_,img = cv.threshold(img_2,130,255,cv.THRESH_BINARY)
plt.imshow(img,"gray")
plt.show()

# Edge detection
dst = cv.Canny(img_2 , 50, 200, None, 3)

cdst = cv.cvtColor(dst, cv.COLOR_GRAY2BGR)
line_mask = np.zeros(dst.shape)

#  Standard Hough Line Transform
linesP = cv.HoughLinesP(dst, 1, np.pi / 180, 50, None, 30, 6)
print(len(linesP))
# print(linesP.squeeze())
distance_list = []
if linesP is not None:
    for i in range(len(linesP)):
      l = linesP[i][0]
      cv.line(line_mask, (l[0], l[1]), (l[2], l[3]), 1, 3, cv.LINE_AA)
# plt.imshow(cdst[:,:,::-1])

plt.imshow(line_mask,cmap="gray")
plt.show()
print()
sorted(distance_list)

MIN_Line = linesP[1].squeeze()
HRS_Line = linesP[0].squeeze()
SEC_Line = linesP[3].squeeze()
HRS_Line,MIN_Line

if (HRS_Line[0] - HRS_Line[2]) != 0:
  m1 = (HRS_Line[1] - HRS_Line[3])/(HRS_Line[0] - HRS_Line[2])
else:
  m1 = 0
if (MIN_Line[0] - MIN_Line[2]) != 0:
  m2 = (MIN_Line[3] - MIN_Line[1])/(MIN_Line[2] - MIN_Line[0])
else:
  m2 = 0

m1,m2

angle = 180 - np.rad2deg(np.arctan(np.abs((m2-m1)/(1+m1*m2))))
print(f"the angle is : {angle:.2f}"