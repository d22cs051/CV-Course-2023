# -*- coding: utf-8 -*-
"""CV A2-A Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VUwG4oXPvqsdgUAPhZgbX_YickJAkOIA

# Identify faulty image and show the defective region

## Getting Data
"""

from pathlib import Path
file_id = "1x1RdxmjBvkRfBMSo7KJ9NE1w8HfxiZW5"
url = f"https://drive.google.com/uc?id={file_id}&export=download"
data_path = Path("data.zip")
if not data_path.is_file():
  print("INFO: Downloading files.")
  !wget -O "data.zip" {url}
else:  
  print("INFO: files Already exists.")

from pathlib import Path
data_path = Path("Problem-3")
if not data_path.is_dir():
  print("INFO: Files Not Exists extracting")
  !unzip -q "data.zip"
else:  
  print("INFO: files Already exists.")

from google.colab.patches import cv2_imshow
from pathlib import Path
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
import sys
from skimage.metrics import structural_similarity

# OBR
def orb_similarly(img1, img2):
  orb = cv.ORB_create()

  # detect keypoint and descriptor
  kp1, des1 = orb.detectAndCompute(img1, None)
  kp2, des2 = orb.detectAndCompute(img2, None)

  # bruteforce
  bf = cv.BFMatcher(cv.NORM_HAMMING, crossCheck = True)

  # perform matches
  matches = bf.match(des1, des2)
  

  # look for simiar region with distance less than 50
  good = [i for i in matches if i.distance < 50]

  if len(matches) == 0:
    return 0

  orb_val = len(good) / len(matches)

  matches = sorted(matches, key = lambda x:x.distance)

  img1 = cv.cvtColor(img1, cv.COLOR_BGR2GRAY)
  img2 = cv.cvtColor(img2, cv.COLOR_BGR2GRAY)
  img3 = cv.drawMatches(img1, kp1, img2, kp2, matches[:100], img2, flags = 2)
  # display_image(img3)

  return (orb_val, img3)

# SIFT
def sift_similarly(img1, img2):

  ### Inits ###
  # Initiate SIFT detector
  sift = cv.SIFT_create()
  # find the keypoints and descriptors with SIFT
  kp1, des1 = sift.detectAndCompute(img1,None)
  kp2, des2 = sift.detectAndCompute(img2,None)
  # BFMatcher with default params
  bf = cv.BFMatcher(cv.NORM_L2, crossCheck = False)
  matches = bf.knnMatch(des1,des2,k=2)
  # Apply ratio test
  bf = cv.BFMatcher()
  matches = bf.match(des1,des2)
  
  good = [i for i in matches if i.distance < 60]


  if len(matches) == 0:
    return 0
  
  sift_val = len(good) / len(matches)

  matches = sorted(matches, key = lambda x:x.distance)

  img1 = cv.cvtColor(img1, cv.COLOR_BGR2GRAY)
  img2 = cv.cvtColor(img2, cv.COLOR_BGR2GRAY)
  img3 = cv.drawMatches(img1, kp1, img2, kp2, matches[:50], img2, flags = 2)
  return (sift_val, img3)

def structural_sim(img1, img2):
  img1 = cv.cvtColor(img1, cv.COLOR_BGR2GRAY)
  img2 = cv.cvtColor(img2, cv.COLOR_BGR2GRAY)
  sim, diff = structural_similarity(img1, img2, full = True)

  return sim

"""## For Example 1"""

exp1_imgs = list(data_path.glob("example-1/*/*.png"))
ref_img_path = list(data_path.glob("example-1/reference.png"))[0]
ref_img_path

ref_img = cv.imread(str(ref_img_path),cv.IMREAD_UNCHANGED)
ref_img = cv.cvtColor(ref_img, cv.COLOR_BGR2RGB)
ref_img = cv.resize(ref_img, (1250, 450), interpolation = cv.INTER_LINEAR)

for i in exp1_imgs:
  print(i)
  f1_image = cv.imread(str(i), cv.IMREAD_UNCHANGED)
  f1_image = cv.cvtColor(f1_image, cv.COLOR_BGR2RGB)
  f1_image = cv.resize(f1_image, (1250, 450), interpolation = cv.INTER_LINEAR)
  orb_similarly_val, orb_img = orb_similarly(ref_img, f1_image)
  sift_val, sift_img = sift_similarly(ref_img, f1_image)
  ssim_val = structural_sim(ref_img, f1_image)
  plt.imshow(sift_img)
  plt.show()
  if sift_val <= 0.07:
    print('Image is Faulty')
    print(f"ORB: {orb_similarly_val} | SIFT: {sift_val} | SSIM: {ssim_val}")

  else:
    print('Perfect Image')
    print(f"ORB: {orb_similarly_val} | SIFT: {sift_val} | SSIM: {ssim_val}")

  print("*"*50)

"""## For Example 2"""

exp2_imgs = list(data_path.glob("example-2/*/*.png"))
ref_img_path = list(data_path.glob("example-2/Orginal.png"))[0]
ref_img_path,exp2_imgs

ref_img = cv.imread(str(ref_img_path),cv.IMREAD_UNCHANGED)
ref_img = cv.cvtColor(ref_img, cv.COLOR_BGR2RGB)
ref_img = cv.resize(ref_img, (1250, 450), interpolation = cv.INTER_LINEAR)

for i in exp2_imgs:
  print(i)
  f1_image = cv.imread(str(i), cv.IMREAD_UNCHANGED)
  f1_image = cv.cvtColor(f1_image, cv.COLOR_BGR2RGB)
  f1_image = cv.resize(f1_image, (1250, 450), interpolation = cv.INTER_LINEAR)
  orb_similarly_val, orb_img = orb_similarly(ref_img, f1_image)
  sift_val, sift_img = sift_similarly(ref_img, f1_image)
  ssim_val = structural_sim(ref_img, f1_image)
  plt.imshow(sift_img)
  plt.show()
  if sift_val > 0.045:
    print('Image is Faulty')
    print(f"ORB: {orb_similarly_val} | SIFT: {sift_val} | SSIM: {ssim_val}")

  else:
    print('Perfect Image')
    print(f"ORB: {orb_similarly_val} | SIFT: {sift_val} | SSIM: {ssim_val}")

  print("*"*50)